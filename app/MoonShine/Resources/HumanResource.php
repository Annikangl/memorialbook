<?php

declare(strict_types=1);

namespace App\MoonShine\Resources;

use App\Models\Profile\Hobby;
use App\Models\Profile\Human\Human;
use App\Models\Profile\Pet\Pet;
use App\Services\HumanService;
use Illuminate\Database\Eloquent\Model;


use MoonShine\Decorations\Column;
use MoonShine\Decorations\Grid;
use MoonShine\Decorations\Tab;
use MoonShine\Decorations\Tabs;
use MoonShine\Fields\Date;
use MoonShine\Fields\Field;
use MoonShine\Fields\Fields;
use MoonShine\Fields\File;
use MoonShine\Fields\Image;
use MoonShine\Fields\Number;
use MoonShine\Fields\Relationships\BelongsTo;
use MoonShine\Fields\Select;
use MoonShine\Fields\Text;
use MoonShine\Fields\Textarea;
use MoonShine\Resources\ModelResource;
use MoonShine\Decorations\Block;
use MoonShine\Fields\ID;

class HumanResource extends ModelResource
{
    protected string $model = Human::class;

    protected string $title = 'Люди';

    private HumanService $humanService;

    public function __construct()
    {
        $this->humanService = app(HumanService::class);
    }

    public function save(Model $item, ?Fields $fields = null): Model
    {
        $fields ??= $this->getFormFields()->onlyFields();

        $fields->fill($item->toArray(), $item);

        $fields->each(fn (Field $field): mixed => $field->beforeApply($item));
        if (! $item->exists) {
            $item = $this->beforeCreating($item);
        }
        if ($item->exists) {
            $item = $this->beforeUpdating($item);
        }

        $fields->withoutOutside()
            ->each(fn (Field $field): mixed => $field->apply($this->onSave($field), $item));
        dd($item);

//        return parent::save($item, $fields); // TODO: Change the autogenerated stub
    }

    public function fields(): array
    {
        return [
            Block::make([
                ID::make()->sortable(),
                Tabs::make([
                    Tab::make('Основная информация',[
                        Text::make('Имя','first_name')->required(),
                        Text::make('Фамилия','last_name')->required(),
                        Text::make('Отчество','middle_name')->required(),
                        Grid::make([
                            Column::make([
                                Select::make('Пол','gender')
                                    ->hideOnIndex()
                                    ->options([
                                        Human::MALE=>'Мужчина',
                                        Human::FEMALE=>'Женщина',
                                    ])->required(),
                            ])->columnSpan(4),
                            Column::make([
                                Date::make('Дата рождения','date_birth')
                                    ->changeFill(fn($data) => $data->getOriginal('date_birth'))
                                    ->required()
//                                    ->format('Y-m-d'),
                            ])->columnSpan(4),
                            Column::make([
                                Date::make('Дата смерти','date_death')
                                    ->changeFill(fn($data) => $data->getOriginal('date_death'))
                                    ->required()
//                                    ->format('Y-m-d'),

                            ])->columnSpan(4),
                        ]),
                        Text::make('Причина смерти','death_reason')
                            ->hideOnIndex()
                            ->required(),
                        Text::make('Место захоронения','burial_place')
                            ->hideOnIndex()
                            ->required(),
                        Grid::make([
                            Column::make([
                                Number::make('Координата, ш.', 'burial_coords')
                                    ->hideOnIndex()
                                    ->required()
                            ])->columnSpan(6),
                            Column::make([
                                Number::make('Координата, д.','burial_coords')
                                    ->hideOnIndex()
                                    ->required(),
                            ])->columnSpan(6),
                        ]),
                        File::make('Сертификат о смерти', 'death_certificate')
                            ->allowedExtensions(['doc', 'docs', 'pdf'])
                            ->hideOnIndex(),
                        Grid::make([
                            Column::make([
                                BelongsTo::make('Мать','mother', resource: new HumanResource())
                                    ->nullable()
                                    ->hideOnIndex(),
                            ])->columnSpan(4),
                            Column::make([
                                BelongsTo::make('Отец','father', resource: new HumanResource())
                                    ->nullable()
                                    ->hideOnIndex(),
                            ])->columnSpan(4),
                            Column::make([
                                BelongsTo::make('Супруг','spouse', resource: new HumanResource())
                                    ->nullable()
                                    ->hideOnIndex(),
                            ])->columnSpan(4),
                        ]),
                    ]),
                    Tab::make('Описание',[
                        Image::make('Изображения и видео','gallery')
                            ->removable()
                            ->multiple()
                            ->allowedExtensions(
                                ['jpg', 'png', 'jpeg','webp', 'mp4']
                            ),
                        Textarea::make('Описание','description')
                            ->hideOnIndex(),

                        Select::make('Хобби','hobby')
                            ->options(Hobby::query()->pluck('title', 'id')->toArray())
                            ->hideOnIndex()
                            ->multiple()
                    ]),
                    Tab::make('Завершение',[
                        Select::make('Настройка публикации', 'as_draft')
                            ->options([
                                '1'=>'Черновик',
                                '0'=>'Активный',
                            ])
                            ->hideOnIndex()
                            ->required(),
                    ]),
                ]),
            ]),
        ];
    }

    public function rules(Model $item): array
    {
        return [];
    }
}
