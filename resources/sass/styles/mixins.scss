//stylelint-disable value-list-max-empty-lines

@import 'colors';
@import 'config';
@import 'functions';

@import 'buttons';

$mixins-defaults: (
    border-color: $border-primary, //для миксина triangle

    fonts-path: 'Fonts/', //для миксина font-face
    fonts-exts: woff2 woff, //для миксина font-face
    line-height: $line-height-primary //для миксина text-overflow
);

//Добавление символа &, если не корневой селектор
@mixin optional-at-root($selector){
    @at-root #{if(not &, $selector, selector-append(&, $selector))}{
        @content;
    }
}

//Миксин для БЭМ-модификаторов
@mixin m($modifiers...){
    @for $i from 1 through length($modifiers){
        &#{$m + nth($modifiers, $i)}{
            @content;
        }
    }
}

//Круг
@mixin circle($diameter, $radius: 50%){
    width: $diameter;
    height: $diameter;
    border-radius: $radius;
}

//Инициализация шрифта
@mixin font-face($fontname, $filename, $style: null, $weight: null, $exts: map-get($mixins-defaults, fonts-exts), $display: swap){
    $src: null;
    $extmods: (
        eot: '?',
        svg: '#' + str-replace($fontname, ' ', '_')
    );
    $formats: (
        otf: 'opentype',
        ttf: 'truetype'
    );

    @each $ext in $exts{
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(map-get($mixins-defaults, fonts-path) + quote($filename + '.' + $extmod)) format(quote($format)), comma); //stylelint-disable-line function-url-quotes
    }
    @font-face{
        src: $src;
        font-family: quote($fontname);
        font-weight: $weight;
        font-style: $style;
        font-display: $display;
    }
}

//Плейсхолдер для полей ввода
@mixin placeholder{
    @include optional-at-root('::-webkit-input-placeholder'){
        @content;
    }
    @include optional-at-root(':-ms-input-placeholder'){
        @content;
    }
    @include optional-at-root('::-moz-placeholder'){
        @content;
    }
}

//Обрезание строки
@mixin line-clamp($line-clamp: 1, $line-height: map-get($mixins-defaults, line-height)){
    max-height: #{strip-unit($line-height) * $line-clamp}em;
    -webkit-line-clamp: $line-clamp;
}

//Стили для элемента с ограниченной длиной строки
@mixin text-overflow($line-clamp: 1, $line-height: map-get($mixins-defaults, line-height)){
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;

    /* autoprefixer: ignore next */
    -webkit-box-orient: vertical;
    @include line-clamp($line-clamp, $line-height);
}

//Псевдо-элементы
@mixin after{
    &::after{
        content: '';
        position: absolute;
        @content;
    }
}
@mixin before{
    &::before{
        content: '';
        position: absolute;
        @content;
    }
}
@mixin before-after{
    &::before,
    &::after{
        content: '';
        position: absolute;
        @content;
    }
}

//Css-свойство appearance
@mixin appearance($appearance){
    //stylelint-disable property-no-vendor-prefix
    -webkit-appearance: $appearance;
    -moz-appearance: $appearance;
    //stylelint-enable property-no-vendor-prefix
}

//Очистка float
@mixin clearfix{
    &::after{
        content: '';
        display: block;
        clear: both;
    }
}

//Фикс для мигающих элементов при анимации в webkit-браузерах
@mixin webkit-fix{
    -webkit-transform: translateZ(0); //stylelint-disable-line property-no-vendor-prefix
}

//Отображение треугольника с помощью border
@mixin triangle($direction, $height, $left: null, $color: map-get($mixins-defaults, border-color), $right: null){
    $colors: transparent transparent transparent transparent;
    $widths: 0 0 0 0;

    @if not $left{
        $left: $height;
    }
    @if not $right{
        $right: $left;
    }

    @if length($direction) == 2{
        @if nth($direction, 1) == top{
            $widths: replace-nth($widths, 2, $left);
            @if nth($direction, 2) == left{
                $colors: replace-nth($colors, 1, $color);
                $widths: replace-nth($widths, 1, $height);
            } @else if nth($direction, 2) == right{
                $colors: replace-nth($colors, 2, $color);
                $widths: replace-nth($widths, 3, $height);
            }
        } @else if nth($direction, 1) == bottom{
            $widths: replace-nth($widths, 4, $left);
            @if nth($direction, 2) == left{
                $colors: replace-nth($colors, 4, $color);
                $widths: replace-nth($widths, 1, $height);
            } @else if nth($direction, 2) == right{
                $colors: replace-nth($colors, 3, $color);
                $widths: replace-nth($widths, 3, $height);
            }
        }
    } @else{
        @if $direction == top or $direction == bottom{
            $widths: replace-nth($widths, 4, $right);
            @if $direction == top{
                $colors: replace-nth($colors, 3, $color);
                $widths: replace-nth($widths, 3, $height);
                $widths: replace-nth($widths, 2, $left);
            } @else if $direction == bottom{
                $colors: replace-nth($colors, 1, $color);
                $widths: replace-nth($widths, 1, $height);
                $widths: replace-nth($widths, 2, $left);
            }
        } @else if $direction == left or $direction == right{
            $widths: replace-nth($widths, 3, $right);
            @if $direction == left{
                $colors: replace-nth($colors, 2, $color);
                $widths: replace-nth($widths, 2, $height);
                $widths: replace-nth($widths, 1, $left);
            } @else if $direction == right{
                $colors: replace-nth($colors, 4, $color);
                $widths: replace-nth($widths, 4, $height);
                $widths: replace-nth($widths, 1, $left);
            }
        }
    }
    border-color: $colors;
    border-style: solid;
    border-width: $widths;
}

//Визуальное скрытие элемента
@mixin sr-only{
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    border: 0;
    white-space: nowrap;
    clip: rect(0, 0, 0, 0);
}

//Показывание визуально скрытого элемента при фокусе
@mixin sr-only-focusable{
    &:active,
    &:focus{
        position: static;
        width: auto;
        height: auto;
        margin: 0;
        overflow: visible;
        white-space: normal;
        clip: auto;
    }
}

//Неактивный элемент
@mixin disabled{
    cursor: default !important;
    opacity: .2 !important;
    user-select: none;
    pointer-events: none;
}

//Скроллбар
@mixin custom-scroll($track: $grey-lightest, $thumb: rgba($text-primary, .7), $size: 7px, $hover: $text-primary){
    scrollbar-width: thin;
    scrollbar-color: $thumb $track;
    &::-webkit-scrollbar{
        width: $size;
        height: $size;
    }
    &::-webkit-scrollbar-track{
        background: $track;
    }
    &::-webkit-scrollbar-thumb{
        background-color: $thumb;
        &:hover{
            background: $hover;
        }
    }
}
